#!/usr/bin/env bash

## IVO.Group package, v1.0
##
## Website: https://ivo.group
## Author: ivan.berezhnov@icloud.com
##
## Initialize stack and site (full reset)
##
## Usage: fin init

# Abort if anything fails
set -e

CURRENT_DIR="$(dirname "$0")"
source "${CURRENT_DIR}/includes/helpers.sh"

#-------------------------- Settings --------------------------------

# PROJECT_ROOT is passed from fin.
# The following variables are configured in the '.env' file: DOCROOT, VIRTUAL_HOST.
SITEDIR_PATH="${DOCROOT_PATH}/sites/default"

#-------------------------- END: Settings --------------------------------

#-------------------------- Helper functions --------------------------------
# Set file/folder permissions
file_permissions ()
{
  chmod -R a+w "${SITEDIR_PATH}"
  mkdir -p "$DOCROOT_PATH/sites/$SITE_DIRECTORY/files"
  chmod 777 "$DOCROOT_PATH/sites/$SITE_DIRECTORY/files"
}

# Copy a settings file.
# Skips if the destination file already exists.
# @param $1 source file
# @param $2 destination file
copy_settings_file()
{
  local source="$1"
  local dest="$2"

  if [[ ! -f $dest ]]; then
    echo "Copying ${dest}..."
  	cp $source $dest
  else
  	echo "${dest} already in place."
  fi
}

# Initialize local settings files
init_settings ()
{
  # Copy from settings templates
  copy_settings_file "${PROJECT_ROOT}/.docksal/settings/development.services.yml" "${SITEDIR_PATH}/development.services.yml"
  copy_settings_file "${PROJECT_ROOT}/.docksal/settings/setting.stage_file_proxy.php" "${SITEDIR_PATH}/setting.stage_file_proxy.php"
  copy_settings_file "${PROJECT_ROOT}/.docksal/settings/settings.local.php" "${SITEDIR_PATH}/settings.local.php"
  echo -e "${green} Done. ${NC}"
}

# Installing composer
composer_install ()
{
	cd $PROJECT_ROOT
	fin composer install --no-ansi --no-dev --no-interaction --optimize-autoloader --no-progress --prefer-dist --ignore-platform-reqs
}

# Install site
site_install ()
{
    echo -e "${green} Installing site...${NC}"
    # TODO: Implement for self project.
    echo -e "${red}TODO: Implement for self project.${red}"
    # fin pull db
}

post_install ()
{
  cd ${DOCROOT_PATH}

  echo-yellow "Running database updates ..."
  fin drush updb -y

  echo-yellow "Importing configuration sync files ..."
  fin drush cim -y

  echo-green "Change admin password ..."
  fin drush upwd "admin" --password="admin"

  echo-yellow "Enabling and configuring stage_file_proxy ..."
  fin drush en stage_file_proxy -y

  echo-yellow "Enabling developer modules ..."

  echo-yellow "Clearing cache ..."
  fin drush cr
}

# Install site or create
site_theme ()
{
    echo-yellow "Build theme styles"
    if [ -f "${MAIN_THEME_PATH}/package-lock.json" ]; then
       rm "${MAIN_THEME_PATH}/package-lock.json"
    fi
    fin tb production
}
#-------------------------- END: Functions --------------------------------

#-------------------------- Execution --------------------------------
# Stack initialization
if [[ "$PROJECT_ROOT" == "" ]]; then
  echo-red "\$PROJECT_ROOT is not set"
  exit 1
fi

if [[ $DOCKER_RUNNING == "true" ]]; then
  echo -e "\n${green_bg} [Step 1] Recreating services... ${NC}"
  fin reset -f
else
  echo -e "\n${green_bg} [Step 1] Creating services... ${NC}"
  fin up
fi
echo "Waiting 10s for MySQL to initialize...";
sleep 10

echo -e "\n${green_bg} [Step 2] Installing composer... ${NC}"
composer_install

echo -e "\n${green_bg} [Step 3] Copying settings... ${NC}"
init_settings

echo -e "\n${green_bg} [Step 4] Installing site... ${NC}"
site_install

echo -e "\n${green_bg} [Step 5] Executing post-install commands... ${NC}"
post_install

echo -e "\n${green_bg} [Step 6] Setting file/folder permissions... ${NC}"
file_permissions

echo -e "\n${green_bg} [Step 7] Build theme styles... ${NC}"
site_theme "-" "$1" "$2"

echo -e "${green_bg}DONE!${NC}"
echo -e "\nOpen ${yellow}http://${VIRTUAL_HOST}/user/login${NC} in your browser to verify the setup."
echo -e "Account: ${yellow}admin // admin ${NC}"
#-------------------------- END: Execution --------------------------------
